<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
                             http://www.w3.org/1999/xlink http://docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:id="java_server_services_annotated">
<info>
    <title>Annotated Client-Side and Server-Side Services</title>
</info>
<para>
    Classes annotated with <code>@Service</code> qualify as annotated services, both on the client-side and on
    the server-side. Support for annotated services is available beginning with CometD 2.1.0.
</para>
<section xml:id="java_server_services_annotated_server_side">
<info>
    <title>Server-Side Annotated Services</title>
</info>
<para>
    Server-side services are usually written by extending the <classname>org.cometd.server.AbstractService</classname>
    class, and instances of these classes normally have a singleton semantic and are created and configured at
    web application startup.
</para>
<para>
    The <classname>org.cometd.server.AbstractService</classname> class provides (via inheritance) some facilities
    that are useful when implementing a service, including access to the <code>ServerSession</code> associated with
    the service instance and registration of methods as a callbacks to receive messages from channels.
</para>
<para>
    Services might depend on other services (for example, a data source to access the database), and might require
    lifecycle management (that is, the services have <code>start()</code>/<code>stop()</code> methods that must be
    invoked at appropriate times).
</para>
<para>
    In services extending <classname>org.cometd.server.AbstractService</classname>, dependency injection and
    lifecycle management, previously you had to write the code by hand in a configuration servlet or configuration
    listeners.
    Now annotated server-side services offer full support for CometD features, and limited support for dependency
    injection and lifecycle management via the <classname>org.cometd.annotation.ServerAnnotationProcessor</classname>
    class.
</para>
<para>
    Annotated service instances are stored in the servlet context under the key that correspond to their full
    qualified class name.
</para>
<section>
<info>
    <title>Dependency Injection Support</title>
</info>
<para>
    The CometD project offers limited support for dependency injection, since normally this is accomplished by other
    frameworks such as <link xl:href="http://www.springsource.org">Spring</link> or
    <link xl:href="http://code.google.com/p/google-guice">Guice</link>.
</para>
<para>
    In particular, it supports only the injection of the BayeuxServer object on fields and methods
    (not on constructors), and performs the injection only if the injection has not yet been performed.
</para>
<para>
    The reason for this limited support is that the CometD project does not want to implement and support a generic
    dependency injection container, but instead offers a simple integration with existing dependency injection
    containers and a minimal support for required CometD objects (such as the BayeuxServer instance).
</para>
<informaltable>
<tgroup cols="2">
<thead>
<row>
<entry>Annotated Style</entry>
<entry>Inherited Style</entry>
</row>
</thead>
<tbody>
<row>
<entry>
<informalexample>
<programlisting language="java"><![CDATA[
@org.cometd.annotation.Service("echoService")
public class EchoService
{
    @javax.inject.Inject
    private BayeuxServer bayeux;
}
]]></programlisting>
</informalexample>
</entry>
<entry>
<informalexample>
<programlisting language="java"><![CDATA[
public class EchoService extends AbstractService
{
    public EchoService(BayeuxServer bayeux)
    {
        super(bayeux, "echoService");
    }
}
]]></programlisting>
</informalexample>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<para>
    The service class is annotated with <code>@Service</code> and specifies the (optional) service name "echoService".
    The BayeuxServer field is annotated with the standard
    <link xl:href="http://jcp.org/en/jsr/detail?id=330">JSR 330</link> <code>@Inject</code> annotation.
    The <code>@Inject</code> annotation is supported (for example, by Spring 3.x) for standard dependency injection
    as specified by JSR 330.
</para>
</section>

<section>
<info>
    <title>Lifecycle Management Support</title>
</info>
<para>
    The CometD project provides lifecycle management via the standard
    <link xl:href="http://jcp.org/en/jsr/detail?id=250">JSR 250</link> <code>@PostConstruct</code> and
    <code>@PreDestroy</code> annotations.
    We offer this support for those that do not use a dependency injection container with lifecycle management
    such as <link xl:href="http://www.springsource.org">Spring</link>.
</para>
</section>

<section>
<info>
    <title>Channel Configuration Support</title>
</info>
<para>
    To initialize channels before they can be actually referenced for subscriptions, the CometD API provides the
    <code>BayeuxServer.createIfAbsent(String channelId, ConfigurableServerChannel.Initializer... initializers)</code>
    method, which allows you to pass initializers that configure the given channel.
    Furthermore, it is useful to have a configuration step for channels that happens before any subscription or
    listener addition, for example, to configure authorizers on the channel
    (see <xref linkend="java_server_authorizers" />.
</para>
<para>
    In annotated services, you can use the <code>@Configure</code> annotation on methods:
<informalexample>
<programlisting language="java"><![CDATA[
@Service("echoService")
public class EchoService
{
    @Inject
    private BayeuxServer bayeux;

    @Configure("/echo")
    public void configure(ConfigurableServerChannel channel)
    {
        channel.setLazy(true);
        channel.addAuthorizer(GrantAuthorizer.GRANT_PUBLISH);
    }
}
]]></programlisting>
</informalexample>
</para>
</section>

<section>
<info>
    <title>Session Configuration Support</title>
</info>
<para>
    Services that extend <classname>org.cometd.server.AbstractService</classname> have two facility methods to
    access the LocalSession and the ServerSession, namely <code>getLocalSession()</code> and
    <code>getServerSession()</code>.
</para>
<para>
    In annotated services, this is accomplished using the <code>@Session</code> annotation:
<informalexample>
<programlisting language="java"><![CDATA[
@Service("echoService")
public class EchoService
{
    @Inject
    private BayeuxServer bayeux;

    @org.cometd.annotation.Session
    private LocalSession localSession;

    @org.cometd.annotation.Session
    private ServerSession serverSession;
}
]]></programlisting>
</informalexample>
</para>
<para>
    Fields (or methods) annotated with the <code>@Session</code> annotation are optional; you can just have the
    <code>LocalSession</code> field, or only the <code>ServerSession</code> field, or both or none, depending on
    whether you need them or not.
</para>
<para>
    You cannot inject Session fields (or methods) with <code>@Inject</code>. This is because the
    <code>LocalSession</code> object and the <code>ServerSession</code> object are related, and tied to a
    particular service instance. Using a generic injection mechanism could lead to confusion (for example, using
    the same sessions in two different services).
</para>
</section>

<section>
<info>
    <title>Listener Configuration Support</title>
</info>
<para>
    For server-side services, methods annotated with <code>@Listener</code> represent callbacks that are invoked
    during the server-side processing of the message.
</para>
<para>
    CometD passes a reference to Listener methods to both:
</para>
<itemizedlist>
<listitem>
<para>The <code>ServerSession</code> half object that sent the message.</para>
</listitem>
<listitem>
<para>The <code>ServerMessage</code> that the server is processing.</para>
</listitem>
</itemizedlist>
<para>
    The callback method must have the following signature, or a covariant version of it:
</para>
<informaltable>
<tgroup cols="2">
<thead>
<row>
<entry>Annotated Style</entry>
<entry>Inherited Style</entry>
</row>
</thead>
<tbody>
<row>
<entry>
<informalexample>
<programlisting language="java"><![CDATA[
@Service("echoService")
public class EchoService
{
    @Inject
    private BayeuxServer bayeux;
    @Session
    private ServerSession serverSession;

    @org.cometd.annotation.Listener("/echo")
    public void echo(ServerSession remote, ServerMessage.Mutable message)
    {
        String channel = message.getChannel();
        Object data = message.getData();
        remote.deliver(serverSession, channel, data, null);
    }
}
]]></programlisting>
</informalexample>
</entry>
<entry>
<informalexample>
<programlisting language="java"><![CDATA[
public class EchoService extends AbstractService
{
    public EchoService(BayeuxServer bayeux)
    {
        super(bayeux, "echoService");
        addService("/echo", "echo");
    }

    public void echo(ServerSession remote, ServerMessage.Mutable message)
    {
        String channel = message.getChannel();
        Object data = message.getData();
        remote.deliver(getServerSession(), channel, data, null);
    }
}
]]></programlisting>
</informalexample>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<para>
    The callback method can return false to indicate that the processing of subsequent listeners should not be
    performed and that the message should not be published.
</para>
</section>

<section>
<info>
    <title>Subscription Configuration Support</title>
</info>
<para>
    For server-side services, methods annotated with <code>@Subscription</code> represent callbacks that are
    invoked during the local-side processing of the message.
    The local-side processing is equivalent to the remote client-side processing, but it is local to the server.
    The semantic is very similar to the remote client-side processing, in the sense that the message has completed
    the server-side processing and has been published. When it arrives to the local side the information on the
    publisher is not available anymore, and the message is a plain <classname>org.cometd.bayeux.Message</classname>
    and not a <classname>org.cometd.bayeux.server.ServerMessage</classname>, exactly as it would happen for a
    remote client.
</para>
<para>
    This is a rarer use case (most of the time user code must be triggered with <code>@Listener</code> semantic),
    but nonetheless is available.
</para>
<para>
    The callback method must have the following signature:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
@Service("echoService")
public class EchoService
{
    @Inject
    private BayeuxServer bayeux;
    @Session
    private ServerSession serverSession;

    @org.cometd.annotation.Subscription("/echo")
    public void echo(Message message)
    {
        System.out.println("Echo service published " + message);
    }
}
]]></programlisting>
</informalexample>
</section>

<section>
<info>
    <title>Annotation Processing</title>
</info>
<para>
    The <classname>org.cometd.annotation.ServerAnnotationProcessor</classname> class performs annotation processing.
</para>
<informalexample>
<programlisting language="java"><![CDATA[
BayeuxServer bayeux = ...;

// Create the ServerAnnotationProcessor
ServerAnnotationProcessor processor = new ServerAnnotationProcessor(bayeux);

// Create the service instance
EchoService service = new EchoService();

// Process the annotated service
processor.process(service);
]]></programlisting>
</informalexample>
<para>
    After the <code>ServerAnnotationProcessor.process()</code> method returns, the service has been processed
    by injecting the <code>BayeuxServer</code> object and the sessions objects, by calling initialization lifecycle
    methods, and by registering listeners and subscribers.
</para>
<para>
    Symmetrically, <code>ServerAnnotationProcessor.deprocess()</code> performs annotation deprocessing, which
    deregisters listeners and subscribers, and then calls destruction lifecycle methods (but does not deinject
    the <code>BayeuxServer</code> object or session objects).
</para>
</section>
</section>

<section xml:id="java_server_services_annotated_client_side">
<info>
    <title>Client-Side Annotated Services</title>
</info>
<para>
    Client-side services have no equivalent in CometD releases prior 2.1.0.
    Like their server-side counterpart, client-side services consist in classes annotated with <code>@Service</code>.
</para>
<para>
    We have introduced client-side services to reduce the boilerplate code required:
</para>
<informaltable>
<tgroup cols="2">
<thead>
<row>
<entry>Annotated Style</entry>
<entry>Traditional Style</entry>
</row>
</thead>
<tbody>
<row>
<entry>
<informalexample>
<programlisting language="java"><![CDATA[
@Service
public class Service
{
    @Session
    private ClientSession bayeuxClient;

    @Listener(Channel.META_CONNECT)
    public void metaConnect(Message connect)
    {
        // Connect handling...
    }

    @Subscription("/foo")
    public void foo(Message message)
    {
        // Message handling...
    }
}
]]></programlisting>
</informalexample>
</entry>
<entry>
<informalexample>
<programlisting language="java"><![CDATA[
ClientSession bayeuxClient = ...;

bayeuxClient.getChannel(Channel.META_CONNECT).addListener(new ClientSessionChannel.MessageListener()
{
    public void onMessage(ClientSessionChannel channel, Message message)
    {
        // Connect handling...
    }
});

bayeuxClient.handshake();
bayeuxClient.waitFor(1000, BayeuxClient.State.CONNECTED);

bayeuxClient.getChannel("/foo").subscribe(new ClientSessionChannel.MessageListener()
{
    public void onMessage(ClientSessionChannel channel, Message message)
    {
        // Message handling...
    }
});
]]></programlisting>
</informalexample>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>

<section>
<info>
    <title>Dependency Injection and Lifecycle Management Support</title>
</info>
<para>
    The CometD project does not offer dependency injection for client-side services, but supports lifecycle
    management via the standard <link xl:href="http://jcp.org/en/jsr/detail?id=250">JSR 250</link>
    <code>@PostConstruct</code> and <code>@PreDestroy</code> annotations.
    Client-side services usually have a shorter lifecycle than server-side services and their dependencies are
    usually injected directly while creating the client-side service instance.
</para>
</section>

<section>
<info>
    <title>Session Configuration Support</title>
</info>
<para>
    In client-side annotated services, the <code>@Session</code> annotation allows the service instance to have the
    <code>ClientSession</code> object injected in a field or method.
    Like server-side annotated services, the session field (or method) cannot be injected with <code>@Inject</code>.
    This is to allow the maximum configuration flexibility between service instances and <code>ClientSession</code>
    instances.
</para>
<informalexample>
<programlisting language="java"><![CDATA[
@Service
public class Service
{
    @org.cometd.annotation.Session
    private ClientSession bayeuxClient;
}
]]></programlisting>
</informalexample>
</section>

<section>
<info>
    <title>Listener Configuration Support</title>
</info>
<para>
    In client-side annotated services, methods annotated with <code>@Listener</code> represent callbacks that
    are called upon receipt of messages on meta channels.
    Do not use listener callbacks to subscribe to broadcast channels.
</para>
<informaltable>
<tgroup cols="2">
<thead>
<row>
<entry>Annotated Style</entry>
<entry>Traditional Style</entry>
</row>
</thead>
<tbody>
<row>
<entry>
<informalexample>
<programlisting language="java"><![CDATA[
@Service
public class Service
{
    @Listener(Channel.META_CONNECT)
    public void metaConnect(Message connect)
    {
        // Connect handling...
    }
}
]]></programlisting>
</informalexample>
</entry>
<entry>
<informalexample>
<programlisting language="java"><![CDATA[
bayeuxClient.getChannel(Channel.META_CONNECT).addListener(new ClientSessionChannel.MessageListener()
{
    public void onMessage(ClientSessionChannel channel, Message message)
    {
        // Connect handling...
    }
});
]]></programlisting>
</informalexample>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>

<section>
<info>
    <title>Subscription Configuration Support</title>
</info>
<para>
    In client-side annotated services, methods annotated with <code>@Subscription</code> represent callbacks that are
    called upon receipt of messages on broadcast channels.
</para>
<informaltable>
<tgroup cols="2">
<thead>
<row>
<entry>Annotated Style</entry>
<entry>Traditional Style</entry>
</row>
</thead>
<tbody>
<row>
<entry>
<informalexample>
<programlisting language="java"><![CDATA[
@Service
public class Service
{
    @Listener("/foo/*")
    public void foos(Message message)
    {
       // Message handling...
    }
}
]]></programlisting>
</informalexample>
</entry>
<entry>
<informalexample>
<programlisting language="java"><![CDATA[
bayeuxClient.getChannel("/foo/*").subscribe(new ClientSessionChannel.MessageListener()
{
    public void onMessage(ClientSessionChannel channel, Message message)
    {
        // Message handling...
    }
});
]]></programlisting>
</informalexample>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section>
<info>
    <title>Annotation Processing</title>
</info>
<para>
The <classname>org.cometd.annotation.ClientAnnotationProcessor</classname> class does annotation processing.
</para>
<informalexample>
<programlisting language="java"><![CDATA[
ClientSession bayeuxClient = ...;

// Create the ClientAnnotationProcessor
ClientAnnotationProcessor processor = new ClientAnnotationProcessor(bayeuxClient);

// Create the service instance
Service service = new Service();

// Process the annotated service
processor.process(service);

bayeuxClient.handshake();
]]></programlisting>
</informalexample>
<para>
    Listener callbacks are configured immediately on the <code>ClientSession</code> object, while subscription
    callbacks are automatically delayed until the handshake is successfully completed.
</para>
</section>
</section>
</section>
