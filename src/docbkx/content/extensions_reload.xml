<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
                             http://www.w3.org/1999/xlink http://docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:id="extensions_reload">
<info>
    <title>Reload Extension</title>
</info>
<para>
    The reload extension allows CometD to load or reload a page without having to re-handshake in the new
    (or reloaded) page, thereby resuming the existing CometD connection.
    This extension requires only the client-side extension.
</para>
<section>
<info>
    <title>Enabling the Client-side Extension</title>
</info>
<para>
    The <code>dojox/cometd/reload.js</code> provides the client side extension binding for Dojo, and it is
    sufficient to use Dojo's <code>dojo.require</code> mechanism:
</para>
<informalexample>
<programlisting language="javascript"><![CDATA[
dojo.require("dojox.cometd.reload");
]]></programlisting>
</informalexample>
<para>
    The file <code>jquery.cometd-reload.js</code> provides the client-side extension binding for jQuery.
    This file must be included in the HTML page via the <code>&lt;script&gt;</code> tag, along with the
    <link xl:href="http://plugins.jquery.com/project/Cookie">jQuery cookie plugin</link> and the reload
    extension implementation:
</para>
<informalexample>
<programlisting language="javascript"><![CDATA[
<script type="text/javascript" src="jquery.cookie.js"></script>
<script type="text/javascript" src="ReloadExtension.js"></script>
<script type="text/javascript" src="jquery.cometd-reload.js"></script>
]]></programlisting>
</informalexample>
<para>
    In both Dojo and jQuery extension bindings, the extension is registered on the default
    <code>cometd</code> object under the name "reload".
</para>
</section>
<section>
<info>
    <title>Configuring the Reload Extension</title>
</info>
<para>
    The reload extension accepts the following configuration parameters:
</para>
<table>
<caption>Reload Extension Configuration Parameters</caption>
<tgroup cols="3">
<thead>
<row>
  <entry>Parameter Name</entry>
  <entry>Default Value</entry>
  <entry>Parameter Description</entry>
</row>
</thead>
<tbody>
<row>
    <entry>cookieName</entry>
    <entry>org.cometd.reload</entry>
    <entry>The name of the short-lived cookie the reload extension uses to save the connection state details</entry>
</row>
<row>
    <entry>cookiePath</entry>
    <entry>/</entry>
    <entry>The path of the short-lived cookie the reload extension uses</entry>
</row>
<row>
    <entry>cookieMaxAge</entry>
    <entry>5</entry>
    <entry>The max age, in seconds, of the short-lived cookie the reload extension uses</entry>
</row>
</tbody>
</tgroup>
</table>
<para>
    The JavaScript <code>cometd</code> object is normally already configured with the default reload extension
    configuration.
    To reconfigure the reload extension:
</para>
<itemizedlist>
<listitem>
<para>
    Reconfigure the extension at startup:
</para>
<informalexample>
<programlisting language="javascript"><![CDATA[
var cometd = dojox.cometd; // Use $.cometd if using jquery
cometd.getExtension('reload').configure({
    cookieMaxAge: 15
});
]]></programlisting>
</informalexample>
</listitem>
<listitem>
<para>
    Reconfigure the extension every time the <code>cometd.reload()</code> method is invoked:
</para>
<informalexample>
<programlisting language="javascript"><![CDATA[
var cometd = dojox.cometd; // Use $.cometd if using jquery
...
cometd.reload({
    cookieMaxAge: 15
});
]]></programlisting>
</informalexample>
</listitem>
</itemizedlist>
<para>
    If you increase the <code>maxCookieAge</code>, be aware that you should probably increase
    the value of <code>maxInterval</code> too (see <xref linkend="java_server_configuration" />), to avoid
     the server expiring the session while the page is reloading.
</para>
</section>
<section>
<info>
    <title>Understanding Reload Extension Details</title>
</info>
<para>
    The reload extension is useful to allow users to reload CometD pages, or to navigate to other CometD
    pages, without going through a disconnect and handshake cycle, thus resuming an existing CometD session
    on the reloaded or on the new page.
</para>
<para>
    When reloading or navigating away from a page, browsers will destroy the JavaScript context associated
    to that page, and interrupt the connection to the server too.
    On the reloaded or on the new page, the JavaScript context is recreated anew by the browser, but the
    CometD JavaScript library has lost all the CometD session details that were established in the previous page.
    In absence of the reload extension, application need to go through another handshake step to recreate
    the CometD session details needed.
</para>
<para>
    The reload extension gives the ability to resume the CometD session in the new page, by re-establishing
    the previously successful CometD session.
    This is useful especially when the server builds a stateful context for the CometD session that is not
    to be lost just because the user refreshed the page, or navigated to another part of the same CometD
    web application.
    A typical example of this stateful context is when the server needs to guarantee message delivery
    (see <xref linkend="extensions_acknowledge" />).
    In this case, the server has a list of messages that have not been acknowledged by the client, and if the client
    reloads the page, without the reload extension this list of messages will be lost, causing the client
    to potentially loose important messages.
    With the reload extension, instead, the CometD session is resumed and it will appear to the server
    as if it was never interrupted, thus allowing the server to deliver to the client the unacknowledged messages.
</para>
<para>
    The reload extension works in this way: on page load, the application configures
    the CometD object, registers channel listeners and finally calls <code>cometd.handshake()</code>.
    This handshake normally contacts the server and establishes a new CometD session, and the reload
    extension tracks this successful handshake.
    On page reload, or when the page is navigated to another CometD page, the application code must call
    <code>cometd.reload()</code> (for example, on the page unload event handler).
    When <code>cometd.reload()</code> is called, the reload extension saves a short-lived cookie with the
    CometD session state details.
    When the new page loads up, it will execute the same code executed on the first page load, namely the code
    that configured CometD, that registered channel listeners, and that finally called
    <code>cometd.handshake()</code>.
    The reload extension is invoked upon the new handshake, sees that the short lived cookie saved
    previously is there, and re-establishes the CometD session with the information stored in the
    short lived cookie.
</para>
<para>
    A simple example follows:
</para>
<informalexample>
<programlisting language="javascript"><![CDATA[
<html>
    <head>
        <script type="text/javascript" src="dojo/dojo.js"></script>
        <script type="text/javascript">
            dojo.require("dojox.cometd");
            dojo.require("dojox.cometd.reload");

            dojox.cometd.configure({ url: "http://localhost:8080/context/cometd", logLevel: "info" });

            // Always subscribe to channels from successful handshake listeners
            dojox.cometd.addListener("/meta/handshake", new function(m)
            {
                if (m.successful)
                {
                    dojox.cometd.subscribe("/some/channel", function() { ... });
                    dojox.cometd.subscribe("/some/other/channel", function() { ... });
                }
            });

            // On page unload, call dojox.cometd.reload()
            dojo.addOnUnload(dojox.cometd, "reload");

            // Finally, handshake
            dojox.cometd.handshake();
        </script>
    </head>
    <body>
    ...
    </body>
</html>
]]></programlisting>
</informalexample>
</section>
</section>
