<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
                             http://www.w3.org/1999/xlink http://docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:id="concepts">
<info>
    <title>Concepts &amp; Architecture</title>
</info>
<para>
    The CometD project implements various
    <link xl:href="http://en.wikipedia.org/wiki/Comet_%28programming%29">Comet techniques</link> to provide a
    scalable web messaging system, one that can run over HTTP or over other emerging web protocols such as
    <link xl:href="http://en.wikipedia.org/wiki/WebSocket">WebSocket</link>.
</para>
<section id="concepts_definitions">
<info>
    <title>Definitions</title>
</info>
<para>
    The <emphasis>client</emphasis> is the entity that initiates a connection, and the
    <emphasis>server</emphasis> is the entity that accepts the connection.
    The connection established is persistent – that is, it remains open until either side decides to close it.
</para>
<para>
    Typical clients are browsers (after all, this is a web environment), but might also be other applications
    such as Java applications, browser plugin applications (such as
    <link xl:href="http://www.silverlight.net/">Silverlight</link>), or scripts in any scripting language.
</para>
<para>
    Depending on the Comet technique employed, a client might open more than one physical connection to the server,
    but you can assume there exists only one logical <emphasis>conduit</emphasis> between one client
    and the server.
</para>
<para>
    The CometD project uses the Bayeux protocol (see <xref linkend="bayeux" />) to exchange information between
    the client and the server.
    The unit of information exchanged is a Bayeux <emphasis>message</emphasis> formatted
    in <link xl:href="http://json.org">JSON</link>.
    A message contains several <emphasis>fields</emphasis>, some of which the
    Bayeux protocol mandates, and others that applications might add.
    A field is a key/value pair; saying that a message has a <emphasis>foo</emphasis> field means that the
    message has a field whose key is the string <emphasis>foo</emphasis>.
</para>
<para>
    All messages the client and server exchange have a <emphasis >channel</emphasis> field.
    The channel field provides the characterization of messages in classes.
    The channel is a central concept in CometD: publishers publish messages to channels, and subscribers subscribe
    to channels to receive messages.
    This is strongly reflected in the CometD APIs.
</para>

<section xml:id="concepts_channels">
<info>
<title>Channel Definitions</title>
</info>
<para>
    A channel is a string that looks like a URL path such as <code>/foo/bar</code>, <code>/meta/connect</code>
    or <code>/service/chat</code>.
</para>
<para>
    The Bayeux specification defines three types of channels: <emphasis>meta channels</emphasis>,
    <emphasis>service channels</emphasis> and <emphasis>broadcast channels</emphasis> (see
    <xref linkend="bayeux" />).
</para>
<para>
    A channel that starts with <code>/meta/</code> is a meta channel, a channel that starts with
    <code>/service/</code> is a service channel, and all other channels are broadcast channels.
</para>
<para>
    A message whose channel field is a meta channel is referred to as a meta message, and similarly there are
    service messages and broadcast messages.
</para>
<para>
    The application creates service channels and broadcast channels; an application can create as many as it needs,
    and can do so at any time.
</para>
<section id="concepts_channels_meta">
<info>
    <title>Meta Channels</title>
</info>
<para>
    The CometD implementation creates meta channels; applications <emphasis>cannot</emphasis>
    create new meta channels.
    Meta channels provide to applications information about the Bayeux protocol
    (see <xref linkend="concepts_bayeux_protocol" />), for example, whether handshakes have been successful or not,
    or whether the connection with the server is broken or has been re-established.
</para>
</section>

<section id="concepts_channels_service">
<info>
    <title>Service Channels</title>
</info>
<para>
    Applications create service channels, which are used in the case of request/response style of
    communication between client and server (as opposed to the publish/subscribe style of communication of
    broadcast channels, see below).
</para>
</section>

<section id="concepts_channels_broadcast">
<info>
    <title>Broadcast Channels</title>
</info>
<para>
    Applications also create broadcast channels, which have the semantic of a messaging topic and are used
    in the case of the publish/subscribe style of communication, where one sender wants to broadcast information
    to multiple recipients.
</para>
</section>

<section id="concepts_channels_wild">
<info>
    <title>Use of Wildcards in Channels</title>
</info>
<para>
    You can use wildcards to match multiple channels: channel <code>/foo/*</code>
    matches <code>/foo/bar</code> but not <code>/foo/bar/baz</code>.
    The latter is matched by <code>/foo/**</code>.
    You can use wildcards for any type of channel: <code>/meta/*</code> matches all meta channels,
    and <code>/service/**</code> matches <code>/service/bar</code> as well as <code>/service/bar/baz</code>.
    Channel <code>/**</code> matches all channels.
    You can specify the wildcards only as the last segment of the channel, so these are invalid channels:
    <code>/**/foo</code> or <code>/foo/*/bar</code>.
</para>
</section>
</section>
</section>

<section id="concepts_high_level">
<info>
    <title>The High Level View</title>
</info>
<para>
    CometD implements a web messaging system, in particular a web messaging system based on the
    <link xl:href="http://en.wikipedia.org/wiki/Publish/subscribe">publish/subscribe</link> paradigm.
</para>
<para>
    In a publish/subscribe messaging system publishers send messages, which are characterized in
    classes. Subscribers express their interest in one or more classes of messages, and receive only messages
    that match the interest they have subscribed to. Senders, in general, have no idea which or how many
    recipients receive the messages they publish.
</para>
<para>
    CometD implements the <emphasis>hub-spoke</emphasis> topology.
    In the default configuration, this means that there is one central server (the hub) and all clients connect to
    that server via conduit links (the spokes).
</para>
<mediaobject>
<alt>Hub-Spoke Topology</alt>
<imageobject>
    <imagedata align="center" fileref="hub_spoke.png" format="PNG" width="3in" />
</imageobject>
</mediaobject>
<para>
    In CometD, the server receives messages from publishers and, if the message's channel is a broadcast channel,
    re-routes the messages to interested subscribers.
    The CometD server treats meta messages and service messages in a special way; it does not re-route them to any
    subscriber (by default it is forbidden to subscribe to meta channels, and it is a no-operation to
    subscribe to service channels).
</para>
<para>
    For example, imagine that <code>clientAB</code> subscribes to channels <code>/A</code> and
    <code>/B</code>, and <code>clientB</code> subscribes to channel <code>/B</code>.
    If a publisher publishes a message on channel <code>/A</code>, only <code>clientAB</code> receives it.
    On the other hand, if a publisher publishes a message on channel <code>/B</code>, both <code>clientAB</code>
    and <code>clientB</code> receive the message. Furthermore, if a publisher publishes a message on channel
    <code>/C</code>, neither <code>clientAB</code> nor <code>clientB</code> receives the message, which ends its
    journey on the server.
    Re-routing broadcast messages is the default behavior of the server, and it does not need any application
    code to perform the re-routing.
</para>
<para>
    Looking from a high level then, you see messages flowing back and forth among clients and server
    through the conduits.
    A single broadcast message might arrive at the server and be re-routed to all clients; you can imagine that
    when it arrives on the server, the message is copied and that a copy is sent to each client (although,
    for efficiency reasons, this is not exactly what happens). If the sender also subscribes to the channel
    it published the message to, it receives a copy of the message back.
</para>
</section>

<section id="concepts_low_level">
<info>
    <title>The Lower Level View</title>
</info>
<para>
    The following sections take a deeper look at how the CometD implementation works.
</para>
<para>
    It should be clear by now that CometD, at its heart, is a client/server system that communicates via a protocol,
    the Bayeux protocol.
</para>
<para>
    In the CometD implementation, the
    <link xl:href="http://c2.com/cgi/wiki?HalfObjectPlusProtocol">half-object plus protocol</link> pattern
    captures the client/server communication: when a half-object on the client establishes a communication conduit
    with the server, its correspondent half-object is created on the server, and the two can – logically – communicate.
    CometD uses a variation of this pattern because there is the need to abstract the transport that carries messages
    to and from the server.
    The transport can be based on the HTTP protocol, but in recent CometD versions also on the WebSocket
    protocol (and you can plug in more transports).
</para>
<para>
    In broad terms, the <emphasis>client</emphasis> is composed of the client half-object and the client transport,
    while the <emphasis>server</emphasis> is a more complex entity that groups server half-objects and server
    transports.
</para>
<section xml:id="concepts_sessions">
<info>
    <title>Sessions</title>
</info>
<para>
    Sessions are a central concept in CometD. They are the representation of the half-objects involved in
    the protocol communication.
</para>
<mediaobject>
<alt>Session Objects</alt>
<imageobject>
    <imagedata align="center" fileref="hopp.png" format="PNG" width="3in" />
</imageobject>
</mediaobject>
<para>
    There are three types of sessions:
</para>
<itemizedlist>
<listitem>
<para>
     <emphasis>Client sessions</emphasis> – the client half-object on the remote client side.
    Client sessions are represented by the
    <classname>org.cometd.Cometd</classname> object in JavaScript, and by the
    <classname>org.cometd.bayeux.client.ClientSession</classname> class (but more frequently by its subclass
    <classname>org.cometd.bayeux.client.BayeuxClient</classname>) in Java.
    The client creates a client session to establish a Bayeux communication with the server,
    and this allows the client to publish and receive messages.
</para>
</listitem>
<listitem>
<para>
    <emphasis >Server sessions</emphasis> – the server half-object on the server side.
    Server sessions are on the server, and are represented by the
    <classname>org.cometd.bayeux.server.ServerSession</classname> class; they are the counterpart of client sessions.
    When a client creates a client session, it is not initially associated with a correspondent
    server session.
    Only when a client session establishes the Bayeux communication with the server does the server create its
    correspondent server session, as well as the link between the two half-objects.
    Each server session has a message queue. Messages publish to a channel and must be delivered
    to remote client sessions that subscribe to the channel. They are first queued into the server session's
    message queue, and then delivered to the correspondent client session.
</para>
</listitem>
<listitem>
<para>
    <emphasis>Local sessions</emphasis> – the client half-object on the server side, represented by class
    <classname>org.cometd.bayeux.server.LocalSession</classname>.
    Local sessions can be thought of as clients living in the server. They do not represent a remote client,
    but instead a server-side client. Local sessions can subscribe to channels and publish messages like a client
    session can, but they live on the server.
    The server only knows about server sessions, and the only way to create a server session is to create
    its correspondent client session first, and then make it establish the Bayeux communication with the server.
    For this reason, on the server side, there is the additional concept of local session.
    A local session is a client session that happens to live on the server, and hence is local to the server.
</para>
<para>
    For example, imagine that a remote client publishes a message every time it changes its state. Other remote
    clients can just subscribe to the channel and receive those state update messages.
    But what if, upon receiving a remote client state update, you want to perform some activity on the server?
    Then you need the equivalent of a remote client, but living on the server,
    and that's what local sessions are.
</para>
<para>
    Server-side services are associated with a local session. Upon creation of the server-side
    service, the local session handshakes and creates the correspondent server session half-object, so that
    the server can treat client sessions and local sessions in the same way (because it sees them both as
    server sessions). The server delivers messages sent to a channel to all server sessions that
    subscribe to that channel, no matter if they are remote client sessions or local sessions.
</para>
<para>
    For further information on services, see <xref linkend="java_server_services" />.
</para>
</listitem>
</itemizedlist>
</section>

<section id="concepts_server">
<info>
    <title>The Server</title>
</info>
<para>
    The <emphasis>server</emphasis> is represented by an instance of
    <classname>org.cometd.bayeux.server.BayeuxServer</classname>.
    The <code>BayeuxServer</code> object acts as a:
</para>
<itemizedlist>
<listitem>
<para>
    Repository for server sessions, see <xref linkend="concepts_sessions" />.
</para>
</listitem>
<listitem>
<para>
    Repository for <emphasis>server transports</emphasis> – represented by the
    <classname>org.cometd.bayeux.server.ServerTransport</classname> class.
    A server transport is a server-side component that handles the details of the communication with the client.
    There are HTTP server transports as well as a WebSocket server transport, and you can plug in other types as well.
    Server transports abstract the communication details so that applications can work knowing only
    Bayeux messages, no matter how they arrive on the server.
</para>
</listitem>
<listitem>
<para>
    Repository for <emphasis>server channels</emphasis> – represented by the
    <classname>org.cometd.bayeux.server.ServerChannel</classname> class.
    A server channel is the server-side representation of a channel; it can receive and publish Bayeux messages.
</para>
</listitem>
<listitem>
<para>
    Repository for <emphasis>extensions</emphasis> – represented by the
    <classname>org.cometd.bayeux.server.BayeuxServer.Extension</classname> class.
    Extensions allow applications to interact with the Bayeux protocol by modifying or even deleting
    or replaying incoming and/or outgoing Bayeux messages.
</para>
<para>
    For further information about extensions, see <xref linkend="extensions" />.
</para>
</listitem>
<listitem>
<para>
    Central authorization authority, via an instance of the <emphasis>security policy</emphasis> – represented by the
    <classname>org.cometd.bayeux.server.SecurityPolicy</classname> class.
    CometD interrogates the security policy to authorize any sensible operation the server performs, such as handshakes,
    channel creation, channel subscription and channel publishing. Applications can provide their own
    security policy to implement their own authorization logic.
</para>
<para>
    For further information about the security policy, see <xref linkend="java_server_authorization" />.
</para>
</listitem>
<listitem>
<para>
    <emphasis>Authorizers</emphasis> – represented by the <classname>org.cometd.bayeux.server.Authorizer</classname>
    class allow you to apply more fine-grained authorization policies.
</para>
<para>
    For further information on authorizers, see <xref linkend="java_server_authorizers" />.
</para>
</listitem>
<listitem>
<para>
    Message processor, by coordinating the work of server transports, extensions and security policy, and by
    implementing a message flow algorithm (see <xref linkend="concepts_message_processing" />) that allows applications
    to interact with messages and channels to implement their application logic.
</para>
</listitem>
</itemizedlist>
</section>

<section id="concepts_listeners">
<info>
    <title>Listeners</title>
</info>
<para>
    Applications use <emphasis>listeners</emphasis> to interact with sessions, channels and the server.
    The Java and JavaScript APIs allow applications to register different kinds of listeners that receive
    notifications of the correspondent events.
    You can usefully think of extensions, security policies and authorizers as special types of listeners.
    The following sections treat them as such.
</para>
<section id="concepts_listeners_client">
<info>
    <title>Client Sessions and Listeners</title>
</info>
<para>
Examples of client session listeners include the following:
</para>
<itemizedlist>
<listitem>
<para>
    You can add extensions to a client session to interact with the incoming
    and outgoing messages that arrive and that the session sends, via
    <code>ClientSession.addExtension(ClientSession.Extension)</code>.
</para>
</listitem>
<listitem>
<para>
    A client session is a repository for channels; you can add message listeners to a channel to
    notify you when a message arrives on that particular channel, via
    <code>ClientSession.getChannel(String).addListener(ClientSessionChannel.MessageListener)</code>.
</para>
</listitem>
</itemizedlist>
</section>
<section id="concepts_listeners_server">
<info>
    <title> Servers and Listeners</title>
</info>
<para>
    On the server, the model is similar but much richer.
</para>
<itemizedlist>
<listitem>
<para>
    You can add extensions to a <code>BayeuxServer</code> instance for all messages that flow through the server
    via <code>BayeuxServer.addExtension(BayeuxServer.Extension)</code>.
</para>
</listitem>
<listitem>
<para>
    <code>BayeuxServer</code> allows you to add listeners that it notifies when channels are created or destroyed
    via <code>BayeuxServer.addListener(BayeuxServer.ChannelListener)</code>,
    and when server sessions are created or destroyed via
    <code>BayeuxServer.addListener(BayeuxServer.SessionListener)</code>.
</para>
</listitem>
<listitem>
<para>
    <code>ServerChannel</code> allows you to add authorizers via
    <code>ServerChannel.addAuthorizer(Authorizer)</code>, and listeners that get notified when a message arrives
    on the channel via <code>ServerChannel.addListener(ServerChannel.MessageListener)</code>, or when a client
    subscribes or unsubscribes to the channel via
    <code>ServerChannel.addListener(ServerChannel.SubscriptionListener)</code>.
</para>
</listitem>
<listitem>
<para>
    <code>ServerSession</code> allows you to add extensions for messages that flow through the server session
    via <code>ServerSession.addExtension(ServerSession.Extension)</code>.
</para>
</listitem>
<listitem>
<para>
    <code>ServerSession</code> allows you to add listeners that get notified when the session is removed (for
    example because the client disconnects, or because the client disappears and therefore the server expires the
    correspondent server session) via <code>ServerSession.addListener(ServerSession.RemoveListener)</code>.
</para>
</listitem>
<listitem>
<para>
    <code>ServerSession</code> allows you add listeners that can interact with the server session's message queue
    for example to detect whether the queue is too big via
    <code>ServerSession.addListener(ServerSession.MaxQueueListener)</code>, or to add/remove/coalesce messages
    just before they are sent via <code>ServerSession.addListener(ServerSession.DeQueueListener)</code>.
</para>
</listitem>
<listitem>
<para>
    <code>ServerSession</code> allows you add listeners that get notified when a message is received by the
    server session (no matter on which channel) via
    <code>ServerSession.addListener(ServerSession.MessageListener)</code>.
</para>
</listitem>
</itemizedlist>
</section>
</section>

<section xml:id="concepts_message_processing">
<info>
    <title>Message Processing</title>
</info>
<para>
    This section describes message processing on both the client and the server.
    Use the following image to understand the detailed components view that make up the client and the server.
</para>
<mediaobject>
    <alt>Detailed CometD Components View</alt>
    <imageobject>
        <imagedata align="center" fileref="hopp2.png" format="PNG" width="3in"/>
    </imageobject>
</mediaobject>
<para>
    When a client sends messages, it uses the client-side channel to publish them.
    The client retrieves the client channel from the client session via
    <code>ClientSession.getChannel(String)</code>.
    Messages first pass through the extensions, which process messages one by one;
    if one extension denies processing of a message, it is deleted and it is not sent to the server.
    At the end of extension processing, the messages pass to the client transport.
</para>
<para>
    The client transport converts the messages to JSON (for the Java client, this is done by a
    <code>JSONContext.Client</code> instance, see <xref linkend="java_json_api" />), establishes the
    conduit with the server transport and then sends the JSON string over the conduit, as the payload
    of a transport-specific envelope (for example, an HTTP request or a WebSocket message).
</para>
<para>
    The envelope travels to the server, where the server transport receives it.
    The server transport converts the messages from the JSON format back to message objects
    (through a <code>JSONContext.Server</code> instance, see <xref linkend="java_json_api" />),
    then passes them to the <code>BayeuxServer</code> instance for processing.
</para>
<para>
    The <code>BayeuxServer</code> processes each message in the following steps:
</para>
<orderedlist>
<listitem>
<para>
    It invokes <code>BayeuxServer</code> extensions (methods <code>rcv()</code> or <code>rcvMeta()</code>);
    if one extension denies processing, a reply is sent to the
    client indicating that the message has been deleted, and no further processing is performed for the message.
</para>
</listitem>
<listitem>
<para>
    It invokes <code>ServerSession</code> extensions (methods <code>rcv()</code> or <code>rcvMeta()</code>,
    only if a <code>ServerSession</code> for that client exists);
    if one extension denies processing, a reply is sent to the
    client indicating that the message has been deleted, and no further processing is performed for the message.
</para>
</listitem>
<listitem>
<para>
    It invokes authorization checks for both the security policy and the authorizers; if the authorization is denied,
    a reply is sent to the client indicating the failure, and no further processing is performed for the message.
</para>
</listitem>
<listitem>
<para>
    If the message is a service or broadcast message, the message passes through
    <code>BayeuxServer</code> extensions (methods <code>send()</code> or <code>sendMeta()</code>).
</para>
</listitem>
<listitem>
<para>
    It invokes server channel listeners; the application adds server channel listeners on the server, and offers
    the last chance to modify the message before it is eventually sent to all subscribers (if it is
    a broadcast message).
    All subscribers see any modification a server channel listener makes to the message, just as if the publisher
    has sent the message already modified.
    After the server channel listeners processing, the message is <emphasis>frozen</emphasis> and no further
    modifications should be made to the message. Applications should not worry about this freezing step, because
    the API clarifies whether the message is modifiable or not: the API has
    as a parameter a modifiable message interface or an unmodifiable one to represent the message object.
    This step is the last processing step for an incoming non-broadcast message, and it therefore ends its
    journey on the server. A reply is sent to publishers to confirm that the message made it to the server
    (see below), but the message is not broadcast to other server sessions.
</para>
</listitem>
<listitem>
<para>
    If the message is a broadcast message, for each server session that subscribes to the channel,
    the message passes through <code>ServerSession</code> extensions (methods <code>send()</code> or
    <code>sendMeta()</code>), then the server session queue
    listeners are invoked and finally the message is added to the server session queue for delivery.
</para>
</listitem>
<listitem>
<para>
    If the message is a lazy message (see <xref linkend="java_server_lazy_messages" />), it is sent on first occasion.
    Otherwise the message is delivered immediately.
    If the server session onto which the message is queued corresponds to a remote client session,
    it is assigned a thread to deliver the messages in its queue through the server transport.
    The server transport drains the server session message queue, converts the messages to JSON and sends them
    on the conduit as the payloads of transport-specific envelopes (for example, an HTTP response or a WebSocket message).
    Otherwise, the server session onto which the message is queued corresponds to a local session,
    and the messages in its queue are delivered directly to the local session.
</para>
</listitem>
<listitem>
<para>
    For both broadcast and non-broadcast messages, a reply message is created, passes through
    <code>BayeuxServer</code> extensions and <code>ServerSession</code> extensions (methods <code>send()</code> or
    <code>sendMeta()</code>). It then passes to the server
    transport, which converts it to JSON through a <code>JSONContext.Server</code> instance (see
    <xref linkend="java_json_api" />), and sends it on the conduit as the payload of a transport-specific envelope
    (for example, an HTTP response or a WebSocket message).
</para>
</listitem>
<listitem>
<para>
    The envelope travels back to the client, where the client transport receives it.
    The client transport converts the messages from the JSON format back to message objects, for the Java client
    via a <code>JSONContext.Client</code> instance (see <xref linkend="java_json_api" />).
</para>
</listitem>
<listitem>
<para>
    Each message then passes through the extensions (methods <code>send()</code> or <code>sendMeta()</code>),
    and channel listeners and subscribers are notified of the message.
</para>
</listitem>
</orderedlist>
<para>
    The round trip from client to server back to client is now complete.
</para>
</section>

<section xml:id="concepts_threading">
<info>
<title>Threading</title>
</info>
<para>
    When Bayeux messages is received by the server, a thread is allocated to handle the messages,
    and server-side listeners are invoked in this thread.
    The CometD implementation does not spawn new threads to call server-side listeners;
    in this way the threading model is kept simple and very similar to the Servlet threading model.
</para>
<para>
    This simple threading model implies that if a server-side listener takes a long time to process the
    message and to return control to the implementation, then the implementation cannot process the next
    messages that may arrive, most often halting the whole server processing.
</para>
<para>
    This is due to the fact that a Bayeux client uses a limited number of connections to interact with the
    server. If a message sent to one connection takes a long time to be processed on the server, the client
    may send additional messages on that connection, but those will not be processed until the previous
    message processing ends.
</para>
<para>
    It is therefore very important that if the application knows that a message may trigger a time consuming
    task (for example a database query), it does so in a separate thread.
</para>
<para>
    Services (see <xref linkend="java_server_services" />) are an easy way to setup server-side listeners
    but share the same threading model with normal server-side listeners: if they need to perform time
    consuming tasks, they need to do so in a separate thread, for example:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
@Service
public class MyService
{
    @Inject
    private BayeuxServer bayeuxServer;
    @Session
    private LocalSession localSession;

    @Listener("/service/query")
    public void processQuery(final ServerSession remoteSession, final ServerMessage message)
    {
        new Thread()
        {
            public void run()
            {
                Map<String, Object> data = performTimeConsumingTask(message);

                // Send data to client once the time consuming task is finished
                remoteSession.deliver(localSession, message.getChannel(), responseData, null);
            }
        }.start();
    }
}
]]></programlisting>
</informalexample>
</section>

<section id="concepts_application">
<info>
<title>
    Application Interaction
</title>
</info>
<para>
    Now that you know that applications interact with CometD through listeners, and how both the client and
    the server process messages, you need to know what an application should do to interact with
    messages to perform its business logic.
</para>

<section id="concepts_application_authentication">
<info>
<title>Server-side Authentication</title>
</info>
<para>
    For an application to interact with authentication, it must register a custom instance of a
    <code>SecurityPolicy</code> and override method <code>SecurityPolicy.canHandshake(...)</code>.
    The <code>SecurityPolicy</code> can customize the handshake reply (for example, to give details about
    an authentication failure) by retrieving the handshake reply from the handshake request:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
public class MySecurityPolicy extends DefaultSecurityPolicy
{
    public boolean canHandshake(BayeuxServer server, ServerSession session, ServerMessage message)
    {
        boolean authenticated = authenticate(session, message);

        if (!authenticated)
        {
            ServerMessage.Mutable reply = message.getAssociated();
            // Here you can customize the reply
        }

        return authenticated;
    }
}
]]></programlisting>
</informalexample>
</section>

<section id="concepts_application_unicast_messages">
<info>
<title>
    Interacting with Meta and Service Messages
</title>
</info>
<para>
    Meta messages and service messages end their journey on the server.
    An application can only interact with these kinds of messages via server channel listeners,
    and therefore must use such listeners to perform its business logic.
</para>
<para>
    You can add server channel listeners in the following ways:
</para>
<itemizedlist>
<listitem>
    <para>Directly via the API at initialization time (see
    <xref linkend="java_server_services_integration" />).</para>
</listitem>
<listitem>
    <para>Indirectly by using inherited services (see
    <xref linkend="java_server_services_inherited" />). You accomplish this by
    calling <code>AbstractService.addService(...),</code>
    or via annotated services (see <xref linkend="java_server_services_annotated" />) using <code>@Listener</code>
    annotations.</para>
</listitem>
</itemizedlist>
<important>
<para>
    Applications that need to perform time consuming tasks in server-side listeners should do so
    in a separate thread to avoid blocking the processing of other incoming messages
    (see <xref linkend="concepts_threading" />).
</para>
</important>
</section>

<section id="concepts_application_broadcast_messages">
<info>
<title>
    Interacting with Broadcast Messages
</title>
</info>
<para>
    Broadcast messages arrive to the server and are delivered to all <code>ServerSessions</code> that subscribe
    to the message's channel.
    Applications can interact with broadcast messages via server channel listeners (in the same way as with
    non-broadcast messages, see above), or by using a <code>LocalSession</code> that subscribes to the message's
    channel.
    You can use this latter solution directly via the API at initialization time (see
    <xref linkend="java_server_services_integration" />), or indirectly via annotated services (see
    <xref linkend="java_server_services_inherited" />) using <code>@Subscription</code> annotations.
</para>
<important>
<para>
    Applications that need to perform time consuming tasks in server-side listeners
    should do so in a separate thread to avoid blocking the processing of other incoming messages
    (see <xref linkend="concepts_threading" />).
</para>
</important>
</section>

<section id="concepts_application_peer_communication">
<info>
<title>
    Communicating with a Specific Remote Client
</title>
</info>
<para>
    Applications that want to deliver messages to a specific client can do so by looking up its correspondent
    server session and delivering the message using <code>ServerSession.deliver(...)</code>.
</para>
<para>
    For example:
</para>
<para>
    Remote client <code>client1</code> wants to send a message to another remote client <code>client2</code>.
    Both clients are already connected and therefore have already performed the handshake with the server.
    Their handshake contained additional information regarding their <code>userId</code>, so that
    <code>client1</code> declared to be "Bob" and <code>client2</code> declared to be "Alice".
    The application could have used a <code>SecurityPolicy</code> or a server channel message listener on channel
    <code>/meta/handshake</code> to perform a mapping between the <code>userId</code> and the server session's id.
</para>
<para>
    Now Bob wants to send a private message only to Alice.
</para>
<para>
    The <code>client1</code> can use a service channel for private messages (such as  <code>/service/private</code>),
    so that messages are not broadcast, and the application is set up so that a server channel listener routes
    messages arriving to <code>/service/private</code> to the other remote client.
</para>
<informalexample>
<programlisting language="java"><![CDATA[
@Service
public class PrivateMessageService
{
    @Session
    private ServerSession session;

    @Listener("/service/private")
    public void handlePrivateMessage(ServerSession sender, ServerMessage message)
    {
        // Retrieve the userId from the message
        String userId = message.get("targetUserId");

        // Use the mapping established during handshake to
        // retrieve the ServerSession for a given userId
        ServerSession recipient = findServerSessionFromUserId(userId);

        // Deliver the message to the other peer
        recipient.deliver(session, message.getChannel(), message.getData(), null);
    }
}
]]></programlisting>
</informalexample>
</section>

<section id="concepts_application_broadcast_communication">
<info>
<title>
    Server-side Message Broadcasting
</title>
</info>
<para>
    Applications might need to broadcast messages on a particular channel in response to an external event.
    Since <code>BayeuxServer</code> is the repository for server channels, the external event handler just needs
    a reference to <code>BayeuxServer</code> to broadcast messages:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
public class ExternalEventBroadcaster
{
    private final BayeuxServer bayeuxServer;

    public ExternalEventBroadcaster(BayeuxServer bayeuxServer)
    {
        this.bayeuxServer = bayeuxServer;

        // Create a local session that will act as the "sender"
        this.session = bayeuxServer.newLocalSession("external");
        this.session.handshake();
    }

    public void onExternalEvent(ExternalEvent event)
    {
        // Retrieve the channel to broadcast to, for example
        // based on the "type" property of the external event
        ServerChannel channel = this.bayeuxServer.getChannel("/events/" + event.getType());
        if (channel != null)
        {
            // Create the data to broadcast by converting the external event
            Map<String, Object> data = convertExternalEvent(event);

            // Broadcast the data
            channel.publish(this.session, data, null);
        }
    }
}
]]></programlisting>
</informalexample>
</section>
</section>

<section xml:id="concepts_bayeux_protocol">
<info>
    <title>Bayeux Protocol</title>
</info>
<para>
    A client communicates with the server by exchanging Bayeux messages.
</para>
<para>
    The Bayeux protocol requires that the first message a new client sends be a
    <emphasis>handshake</emphasis> message (a message sent on <code>/meta/handshake</code> channel).
    On the server, if the processing of the incoming handshake message is successful, <code>BayeuxServer</code>
    creates the server-side half-object instance (<code>ServerSession</code>) that
    represents the client that initiated the handshake.
    When the processing of the handshake completes, the server sends back a handshake reply to the client.
</para>
<para>
    The client processes the handshake reply, and if it is successful, starts – under the covers – a
    heartbeat mechanism with the server, by exchanging <emphasis>connect</emphasis> messages
    (a message sent on a <code>/meta/connect</code> channel).
    The details of this heartbeat mechanism depend on the client transport used, but can be seen as the client
    sending a connect message and expecting a reply after some time (when using HTTP transports, the heartbeat
    mechanism is also known as <emphasis>long-polling</emphasis>).
    The heartbeat mechanism allows a client to detect if the server is gone (the client does not receive the
    connect message reply from the server), and allows the server to detect if the client is gone (the server
    does not receive the connect message request from the client).
</para>
<para>
    Connect messages continue to flow between client and server until either side decides to disconnect by sending a
    <emphasis>disconnect</emphasis> message (a message sent on the <code>/meta/disconnect</code> channel).
</para>
<para>
    While connected to the server, a client can subscribe to channels by sending a
    <emphasis>subscribe</emphasis> message (a message sent on a <code>/meta/subscribe</code> channel).
    Likewise, a client can unsubscribe from a channel by sending an
    <emphasis>unsubscribe</emphasis> message (a message sent on a <code>/meta/unsubscribe</code> channel).
    A client can publish messages containing application-specific data at any time while it is connected,
    and to any broadcast channel (even if it is not subscribed to that channel).
</para>
</section>
</section>
</chapter>
