<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="javascript_configure">
<info>
    <title>Configuring and Initializing</title>
</info>
<para>
    After you set up your skeleton project following the <xref linkend="primer" />, you probably want to fully
    understand how to customize and configure the parameters that govern the behavior of the CometD implementation.
</para>
<para>
    The complete API is available through a single object prototype named <code>org.cometd.Cometd</code>.
    The Dojo toolkit has one instance of this object available under the name <code>dojox.cometd</code>, while for
    jQuery it is available under the name <code>$.cometd</code>.
    This default <code>cometd</code> object has been instantiated and configured with the default values and it has
    not yet started any Bayeux communication.
</para>
<para>
    Before the <code>cometd</code> object can start Bayeux communication it needs a mandatory parameter:
    the URL of the Bayeux server.
    The URL of the server must be absolute (and therefore include the scheme, host, optionally the port and the path
    of the server).
    The scheme of the URL must always be either "http" or "https". The CometD JavaScript implementation will
    transparently take care of converting the scheme to "ws" or "wss" in case of usage of the WebSocket protocol.
</para>
<para>
    One <code>cometd</code> object connects to one Bayeux server. If you need to connect to multiple Bayeux
    servers, see <xref linkend="javascript_configure_multiple_objects" />
</para>
<para>
    There are two ways of passing the URL parameter:
</para>
<informalexample>
<programlisting language="javascript"><![CDATA[
// First style: URL string
cometd.configure('http://localhost:8080/cometd');

// Second style: configuration object
cometd.configure({
    url: 'http://localhost:8080/cometd'
});
]]></programlisting>
</informalexample>
<para>
The first way is a shorthand for the second way.
However, the second way allows you to pass other configuration parameters, currently:
</para>
<table>
<caption>JavaScript Library Configuration Parameters</caption>
<tgroup cols="4">
<thead>
<row>
  <entry>Parameter Name</entry>
  <entry>Required</entry>
  <entry>Default Value</entry>
  <entry>Parameter Description</entry>
</row>
</thead>
<tbody>
<row>
  <entry>url</entry>
  <entry>yes</entry>
  <entry></entry>
  <entry>The URL of the Bayeux server this client will connect to.</entry>
</row>
<row>
  <entry>logLevel</entry>
  <entry>no</entry>
  <entry>info</entry>
  <entry>The log level. Possible values are: "warn", "info", "debug". Output to window.console if available.</entry>
</row>
<row>
  <entry>maxConnections</entry>
  <entry>no</entry>
  <entry>2</entry>
  <entry>
      The maximum number of connections used to connect to the Bayeux server. Change this value only if you know
      exactly the client's connection limit and what "request queued behind long poll" means.
  </entry>
</row>
<row>
  <entry>backoffIncrement</entry>
  <entry>no</entry>
  <entry>1000</entry>
  <entry>
      The number of milliseconds that the backoff time increments every time a connection with the Bayeux server fails.
      CometD attempts to reconnect after the backoff time elapses.
  </entry>
</row>
<row>
  <entry>maxBackoff</entry>
  <entry>no</entry>
  <entry>60000</entry>
  <entry>
      The maximum number of milliseconds of the backoff time after which the backoff time is not incremented
      further.
  </entry>
</row>
<row>
  <entry>reverseIncomingExtensions</entry>
  <entry>no</entry>
  <entry>true</entry>
  <entry>Controls whether the incoming extensions are called in reverse order with respect to the registration order.</entry>
</row>
<row>
  <entry>maxNetworkDelay</entry>
  <entry>no</entry>
  <entry>10000</entry>
  <entry>The maximum number of milliseconds to wait before considering a request to the Bayeux server failed.</entry>
</row>
<row>
  <entry>requestHeaders</entry>
  <entry>no</entry>
  <entry>{}</entry>
  <entry>
      An object containing the request headers to be sent for every Bayeux request
      (for example, <code>{"My-Custom-Header":"MyValue"}</code>).
  </entry>
</row>
<row>
  <entry>appendMessageTypeToURL</entry>
  <entry>no</entry>
  <entry>true</entry>
  <entry>
      Determines whether or not the Bayeux message type (handshake, connect, disconnect) is appended to the
      URL of the Bayeux server (see above).
  </entry>
</row>
<row>
  <entry>autoBatch</entry>
  <entry>no</entry>
  <entry>false</entry>
  <entry>
      Determines whether multiple publishes that get queued are sent as a batch on the first occasion,
      without requiring explicit batching.
  </entry>
</row>
<row>
  <entry>connectTimeout</entry>
  <entry>no</entry>
  <entry>0</entry>
  <entry>
      The maximum number of milliseconds to wait for a WebSocket connection to be opened.
      It does not apply to HTTP connections. A timeout value of 0 means to wait forever.
  </entry>
</row>
</tbody>
</tgroup>
</table>

<para>
    After you have configured the <code>cometd</code> object, the Bayeux communication does not start until you call
    <code>handshake()</code> (see the <xref linkend="javascript_handshake" />).
</para>
<para>
    Previous users of the JavaScript CometD implementation called a method named <code>init()</code>.
    This method still exists, and it is a shorthand for calling <code>configure()</code> followed by
    <code>handshake()</code>.
    Follow the advice in the <xref linkend="javascript_handshake" /> as it applies as well to <code>init()</code>.
</para>

<section xml:id="javascript_configure_multiple_objects">
<info>
    <title>Configuring and Initializing Multiple Objects</title>
</info>
<para>
    Sometimes there is the need to connect to multiple Bayeux servers.
    The default <code>cometd</code> object available as <code>dojox.cometd</code> or <code>$.cometd</code>
    can only be configured to connect to one server.
</para>
<para>
    However, it is easy to create other <code>cometd</code> objects.
    In Dojo, there is a <code>dojox.Cometd</code> (note the capital 'C' of <code>Cometd</code>)
    constructor function that can be used to create new <code>cometd</code> objects.
    In jQuery, there is an equivalent <code>$.Cometd</code> constructor function.
    It can be used in this way:
</para>
<informalexample>
<programlisting language="javascript"><![CDATA[
// Dojo style
var cometd1 = dojox.cometd; // The default cometd object
var cometd2 = new dojox.Cometd(); // A second cometd object

// jQuery style
var cometd1 = $.cometd; // The default cometd object
var cometd2 = new $.Cometd(); // A second cometd object

// Configure and handshake
cometd1.init('http://host1:8080/cometd');
cometd2.init('http://host2:9090/cometd');
]]></programlisting>
</informalexample>
<para>
    Note how the two <code>cometd</code> objects are initialized with different URLs.
</para>

<section>
<info>
    <title>Configuring Extensions in Multiple Objects</title>
</info>
<para>
    Configuring extensions in the default <code>cometd</code> object is covered in <xref linkend="extensions" />.
    To configure extensions for the additional <code>cometd</code> objects must be done manually
    in the following way:
</para>
<informalexample>
<programlisting language="javascript"><![CDATA[
// Dojo style
var cometd1 = dojox.cometd; // The default cometd object
var cometd2 = new dojox.Cometd(); // A second cometd object

// jQuery style
var cometd1 = $.cometd; // The default cometd object
var cometd2 = new $.Cometd(); // A second cometd object

// Configure extensions for the second object
cometd2.registerExtension('ack', new org.cometd.AckExtension());
cometd2.registerExtension('timestamp', new org.cometd.TimeStampExtension());
cometd2.registerExtension('timesync', new org.cometd.TimeSyncExtension());
cometd2.registerExtension('reload', new org.cometd.ReloadExtension());
]]></programlisting>
</informalexample>
<para>
    You should not configure the extensions for the default <code>cometd</code> object in this way,
    but instead follow <xref linkend="extensions" />.
</para>
<para>
    You should configure extension manually like shown above only for additional <code>cometd</code> objects.
    You can configure zero, one, or all the extensions for the additional <code>cometd</code> objects,
    depending on your application needs.
</para>
</section>
</section>
</section>
