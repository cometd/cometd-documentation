<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
                             http://www.w3.org/1999/xlink http://docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:id="java_server_configuration">
<info>
    <title>Configuring the Java Server</title>
</info>
<para>
    You can specify <code>BayeuxServer</code> and server transport parameters in <code>web.xml</code> as init
    parameters of the <classname>org.cometd.server.CometdServlet</classname>.
    If the CometD servlet creates the <code>BayeuxServer</code> instance, the servlet init parameters are passed
    to the <code>BayeuxServer</code> instance, which in turn configures the server transports.
</para>
<para>
    If you followed the <xref linkend="primer" />, Maven has configured the <code>web.xml</code> file for you;
    here are details its configuration, a sample <code>web.xml</code>:
</para>
<para>
<informalexample>
<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
         version="2.5">

    <servlet>
        <servlet-name>cometd</servlet-name>
        <servlet-class>org.cometd.server.CometdServlet</servlet-class>
        <init-param>
            <param-name>timeout</param-name>
            <param-value>60000</param-value>
        </init-param>
        <init-param>
            <param-name>logLevel</param-name>
            <param-value>3</param-value>
        </init-param>
    </servlet>
    <servlet-mapping>
        <servlet-name>cometd</servlet-name>
        <url-pattern>/cometd/*</url-pattern>
    </servlet-mapping>

</web-app>
]]></programlisting>
</informalexample>
</para>
<para>
    You must define and map the <classname>org.cometd.server.CometdServlet</classname> in <code>web.xml</code>
    to enable the server to interpret the Bayeux protocol.
    It is normally mapped on <code>/cometd/*</code>, but you can change the mapping url-pattern if you prefer.
</para>
<section>
<info>
    <title>Configuring <code>BayeuxServer</code></title>
</info>
<para>
    Here is the list of configuration init parameters that the <code>BayeuxServer</code> implementation accepts:
</para>
<table>
<caption>BayeuxServer Configuration Parameters</caption>
<tgroup cols="4">
<thead>
<row>
  <entry>Parameter Name</entry>
  <entry>Default Value</entry>
  <entry>Since</entry>
  <entry>Parameter Description</entry>
</row>
</thead>
<tbody>
<row>
  <entry>logLevel</entry>
  <entry>0</entry>
  <entry>2.0.0</entry>
  <entry>The log level: 0 = off, 1 = config, 2 = info, 3 = debug.</entry>
</row>
<row>
  <entry>transports</entry>
  <entry>empty string</entry>
  <entry>2.2.0</entry>
  <entry>
      A comma-separated list of <code>ServerTransport</code> implementation class names (that take a
      <code>org.cometd.server.BayeuxServerImpl</code> as only constructor parameter) to add to the
      default server transports.
  </entry>
</row>
<row>
  <entry>allowedTransports</entry>
  <entry>empty string</entry>
  <entry>2.2.0</entry>
  <entry>
      A comma-separated list of <code>ServerTransport</code> names allowed.
      If not specified, the default server transports are allowed.
  </entry>
</row>
<row>
  <entry>jsonContext</entry>
  <entry><code>org.cometd.server.JettyJSONContextServer</code></entry>
  <entry>2.4.0</entry>
  <entry>
      The full qualified name of a class implementing <code>org.cometd.common.JSONContext.Server</code>.
      The class is loaded and instantiated using the default constructor.
  </entry>
</row>
</tbody>
</tgroup>
</table>
</section>
<section>
<info>
    <title>Configuring Server Transports</title>
</info>
<para>
    In CometD 2 the server transports are pluggable. You can configure them using parameters that may have a
    prefix that specifies the transport the parameter refers to.
</para>
<para>
    For example, the parameter <code>timeout</code> has no prefix, and hence it is valid for all transports;
    the parameter <code>callback-polling.jsonp.timeout</code> overrides the <code>timeout</code> parameter for the
    callback polling transport only, while <code>ws.timeout</code> overrides it for the websocket transport
    (see <classname>org.cometd.bayeux.Transport</classname>
    <link xl:href="http://download.cometd.org/bayeux-api/org/cometd/bayeux/Transport.html">javadocs</link> for details).
</para>
<para>
    Here is the list of configuration init parameters (to be specified in <code>web.xml</code>)
    that different server transports accept:
</para>
<table>
<caption>Server Transports Common Configuration Parameters</caption>
<tgroup cols="3">
<thead>
<row>
  <entry>Parameter Name</entry>
  <entry>Default Value</entry>
  <entry>Parameter Description</entry>
</row>
</thead>
<tbody>
<row>
  <entry>timeout</entry>
  <entry>30000</entry>
  <entry>
      The time, in milliseconds, that a server waits for a message before responding to a
      long poll with an empty response.
  </entry>
</row>
<row>
  <entry>interval</entry>
  <entry>0</entry>
  <entry>
      The time, in milliseconds, that the client must wait between the
      end of one long poll request and the start of the next.
  </entry>
</row>
<row>
  <entry>maxInterval</entry>
  <entry>10000</entry>
  <entry>
      The maximum period of time, in milliseconds, that the server waits for a new long poll
      from a client before that client is considered invalid and is removed.
  </entry>
</row>
<row>
  <entry>maxLazyTimeout</entry>
  <entry>5000</entry>
  <entry>
      The maximum period of time, in milliseconds, that the server waits before delivering or
      publishing lazy messages.
  </entry>
</row>
<row>
  <entry>metaConnectDeliverOnly</entry>
  <entry>false</entry>
  <entry>
      Whether the transport should deliver the messages only via long poll (enables strict message ordering).
      Enabling this option allows for strict message ordering at the cost of a slightly chattier protocol
      (because delivery via <code>/meta/connect</code> requires waking up the long poll).
  </entry>
</row>
<row>
  <entry>maxQueue</entry>
  <entry>-1</entry>
  <entry>
      The maximum size of the <code>ServerSession</code> queue. A value of -1 means no queue size limit.
      A positive value triggers the invocation of
      <classname>org.cometd.bayeux.server.ServerSession.MaxQueueListener</classname>s when the max queue
      size is exceeded.
  </entry>
</row>
</tbody>
</tgroup>
</table>
<?linebreak?>

<table>
<caption>Long Polling &amp; Callback Polling Server Transports Configuration Parameters</caption>
<tgroup cols="3">
<thead>
<row>
  <entry>Parameter Name</entry>
  <entry>Default Value</entry>
  <entry>Parameter Description</entry>
</row>
</thead>
<tbody>
<row>
  <entry>maxSessionsPerBrowser</entry>
  <entry>1</entry>
  <entry>
      The max number of sessions (tabs/frames) allowed to long poll from the same browser; a negative value
      allows unlimited sessions (see also <xref linkend="java_server_multiple_sessions" />).
  </entry>
</row>
<row>
  <entry>allowMultiSessionsNoBrowser</entry>
  <entry>false</entry>
  <entry>
      Whether to allow multiple sessions (tabs/frames) in case the browser cannot be detected
      (see also <xref linkend="java_server_multiple_sessions" />).
  </entry>
</row>
<row>
  <entry>multiSessionInterval</entry>
  <entry>2000</entry>
  <entry>
      The period of time, in milliseconds, that specifies the client normal polling period in case the server detects
      more sessions (tabs/frames) connected from the same browser than allowed by the
      <code>maxSessionsPerBrowser</code> parameter.
      A non-positive value means that additional sessions are disconnected.
  </entry>
</row>
<row>
  <entry>browserId</entry>
  <entry>BAYEUX_BROWSER</entry>
  <entry>
      The name of the cookie used to identify multiple sessions (see <xref linkend="java_server_multiple_sessions" />).
  </entry>
</row>
</tbody>
</tgroup>
</table>
<?linebreak?>

<table>
<caption>WebSocket Server Transport Configuration Parameters</caption>
<tgroup cols="3">
<thead>
<row>
  <entry>Parameter Name</entry>
  <entry>Default Value</entry>
  <entry>Parameter Description</entry>
</row>
</thead>
<tbody>
<row>
  <entry>ws.messagesPerFrame</entry>
  <entry>1</entry>
  <entry>
      How many Bayeux messages should be sent per WebSocket frame.
      Setting this parameter too high may result in WebSocket frames that may be rejected by the recipient
      because they are too big.
  </entry>
</row>
<row>
  <entry>ws.bufferSize</entry>
  <entry>65536</entry>
  <entry>
      The size, in bytes, of the buffer used to read and write WebSocket frames.
  </entry>
</row>
<row>
  <entry>ws.maxMessageSize</entry>
  <entry>65520</entry>
  <entry>
      The maximum size, in bytes, of an incoming WebSocket message.
  </entry>
</row>
<row>
  <entry>ws.idleTimeout</entry>
  <entry>300000</entry>
  <entry>
      The idle timeout, in milliseconds, for the WebSocket connection.
  </entry>
</row>
</tbody>
</tgroup>
</table>
</section>

<section xml:id="java_server_configuration_advanced">
<info>
    <title>Configuring the <code>CrossOriginFilter</code></title>
</info>
<para>
    If you are using <link xl:href="http://eclipse.org/jetty">Jetty 7</link>, you might want to configure the
    <code>CrossOriginFilter</code>.
    This filter implements the
    <link xl:href="http://www.w3.org/TR/access-control/">Cross-Origin Resource Sharing</link> specification,
    and allows recent browsers that implement it (as of November 2009, Firefox 3.5.x, Chrome 3.x and Safari 4.x)
    to perform cross-domain JavaScript requests (see <xref linkend="javascript_transports" />).
</para>
<para>
    Here is an example of <code>web.xml</code> configuration for the <code>CrossOriginFilter</code>:
</para>
<informalexample>
<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
         version="2.5">

    <servlet>
        <servlet-name>cometd</servlet-name>
        <servlet-class>org.cometd.server.CometdServlet</servlet-class>
        <init-param>
            <param-name>timeout</param-name>
            <param-value>60000</param-value>
        </init-param>
    </servlet>
    <servlet-mapping>
        <servlet-name>cometd</servlet-name>
        <url-pattern>/cometd/*</url-pattern>
    </servlet-mapping>

    <filter>
        <filter-name>cross-origin</filter-name>
        <filter-class>org.eclipse.jetty.servlets.CrossOriginFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>cross-origin</filter-name>
        <url-pattern>/cometd/*</url-pattern>
    </filter-mapping>

</web-app>
]]></programlisting>
</informalexample>
<para>
    Refer to the
    <link xl:href="http://wiki.eclipse.org/Jetty/Feature/Cross_Origin_Filter">Jetty Cross Origin Filter documentation</link>
    for the filter configuration.
</para>
</section>

<section xml:id="java_server_configuration_servlet_25">
<info>
<title>Configuring Servlet 2.5 Containers</title>
</info>
<para>
    CometD runs without additional configuration in Jetty 7 (a Servlet 2.5 Container) and in any Servlet 3.0
    Container (see below).
    In order to run in other Servlet 2.5 Containers, such as Tomcat, CometD requires additional configuration.
</para>
<para>
    Non-Jetty Servlet 2.5 Containers need to install the <code>ContinuationFilter</code>, mapping it to the same
    path of the <code>CometdServlet</code> (usual <code>/cometd/*</code>), for example:
</para>
<informalexample>
<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
         version="2.5">

    <servlet>
        <servlet-name>cometd</servlet-name>
        <servlet-class>org.cometd.server.CometdServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>cometd</servlet-name>
        <url-pattern>/cometd/*</url-pattern>
    </servlet-mapping>

    <filter>
        <filter-name>continuation</filter-name>
        <filter-class>org.eclipse.jetty.continuation.ContinuationFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>continuation</filter-name>
        <url-pattern>/cometd/*</url-pattern>
    </filter-mapping>

</web-app>
]]></programlisting>
</informalexample>
</section>

<section xml:id="java_server_configuration_servlet_30">
<info>
<title>Configuring Servlet 3 Asynchronous Features</title>
</info>
<para>
    The CometD libraries are portable across servlet containers.
    When a CometD web application is deployed to a Servlet 3 compliant container (such as Jetty 7 or greater,
    or Tomcat 7 or greater), CometD makes use of the Servlet 3 asynchronous features.
</para>
<para>
    To enable the Servlet 3 asynchronous features, you need to:
    <itemizedlist>
    <listitem>
    <para>Modify the <filename>web.xml</filename>
    configuration by updating the <code>version</code> attribute of the <code>web-app</code> element to 3.0 (1).</para>
    </listitem>
    <listitem>
    <para> Add the <code>async-supported</code> element to filters that might execute before the
    <code>CometdServlet</code> <emphasis>and</emphasis> to the <code>CometdServlet</code> itself (2).</para>
    </listitem>
    </itemizedlist>
</para>
<para>
For example:
</para>
<informalexample>
<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">                                                                  (1)

    <servlet>
        <servlet-name>cometd</servlet-name>
        <servlet-class>org.cometd.server.CometdServlet</servlet-class>
        <async-supported>true</async-supported>                                          (2)
    </servlet>
    <servlet-mapping>
        <servlet-name>cometd</servlet-name>
        <url-pattern>/cometd/*</url-pattern>
    </servlet-mapping>

    <filter>
        <filter-name>cross-origin</filter-name>
        <filter-class>org.eclipse.jetty.servlets.CrossOriginFilter</filter-class>
        <async-supported>true</async-supported>                                          (2)
    </filter>
    <filter-mapping>
        <filter-name>cross-origin</filter-name>
        <url-pattern>/cometd/*</url-pattern>
    </filter-mapping>

</web-app>
]]></programlisting>
</informalexample>
<para>
    The typical error that you get if you do not enable the Servlet 3 asynchronous features is the following:
</para>
<screen>
IllegalStateException: the servlet does not support async operations for this request
</screen>
</section>

<section xml:id="java_server_configuration_channels">
<info>
    <title>Configuring <code>ServerChannel</code>s</title>
</info>
<para>
    Server channels are used to broadcast messages to multiple clients, and are a central concept of CometD
    (see <xref linkend="concepts" />).
    Class <classname>org.cometd.bayeux.server.ServerChannel</classname> represents server channels; instances
    of server channels can be obtained from a <code>BayeuxServer</code> instance.
</para>
<para>
    With the default security policy, server channels may be created simply by publishing to a channel: if the
    channel does not exist, it is created on-the-fly.
    This may open up for creation of a large number of server channel, for example when messages are published
    to channels created with a random name, such as <code>/topic/atyd9834o329</code>, and for race conditions
    during channel creation (since the same server channel may be created
    concurrently by two remote clients publishing to that channel at the same time).
</para>
<para>
    To avoid that these transient server channels grow indefinitely and occupy a lot of memory, the CometD
    server aggressively sweeps server channels, by default every second, removing all channels that are not in
    use by the application anymore.
</para>
<para>
    Given the above, we need to solve two problems:
</para>
<itemizedlist>
<listitem>
<para>
    how to atomically create and configure a server channel
</para>
</listitem>
<listitem>
<para>
    how to avoid that channels that the application knows they will be used at a later time are swept prematurely
</para>
</listitem>
</itemizedlist>
<para>
    The solution offered by the CometD API for the first problem is to provide a method that atomically creates
    and initializes server channels:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
BayeuxServer bayeuxServer = ...;
boolean created = bayeuxServer.createIfAbsent("/my/channel", new ServerChannel.Initializer()
{
    public void configureChannel(ConfigurableServerChannel channel)
    {
        // Here configure the channel
    }
});
]]></programlisting>
</informalexample>
<para>
    Method <code>BayeuxServer.createIfAbsent(String channelName, Initializer... initializers)</code> atomically
    creates the channel, returning true or false to indicate whether the channel was created or if it existed
    already.
    The <code>Initializer</code> callback is called only if the channel is created by the invocation to
    <code>createIfAbsent(...)</code>.
</para>
<para>
    The solution to the second problem is to configure the channel as <emphasis>persistent</emphasis>, so that
    the sweeper does not remove the channel:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
BayeuxServer bayeuxServer = ...;
boolean created = bayeuxServer.createIfAbsent("/my/channel", new ServerChannel.Initializer()
{
    public void configureChannel(ConfigurableServerChannel channel)
    {
        channel.setPersistent(true);
    }
});
]]></programlisting>
</informalexample>
<para>
    You can not only configure <code>ServerChannel</code> instances to be persistent, but to be
    <emphasis>lazy</emphasis> (see <xref linkend="java_server_lazy_messages" />), you can add listeners, and you
    can add <code>Authorizer</code>s (see <xref linkend="java_server_authorizers" />).
</para>
<para>
    Creating a server channel does not return you the channel that has been created. In order to obtain the
    server channel reference, you need to call <code>BayeuxServer.getChannel(String channelName)</code>:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
BayeuxServer bayeuxServer = ...;
String channelName = "/my/channel";
bayeuxServer.createIfAbsent(channelName, new ServerChannel.Initializer()
{
    public void configureChannel(ConfigurableServerChannel channel)
    {
        channel.setPersistent(true);
    }
});
ServerChannel channel = bayeuxServer.getChannel(channelName);
]]></programlisting>
</informalexample>
<para>
    The code above creates the channel, configures it to be persistent and then obtains a reference to it, that
    is guaranteed to be non-null (if <code>createIfAbsent(...)</code> returned true).
</para>
<para>
    A typical error in CometD applications is to create the channel without making it persistent, and then trying
    to obtain a reference to it without checking if it's null:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
BayeuxServer bayeuxServer = ...;
String channelName = "/my/channel";

// Wrong, channel not marked as persistent, but used later
bayeuxServer.createIfAbsent(channelName);

// Other application code here

ServerChannel channel = bayeuxServer.getChannel(channelName);
channel.publish(...); // May throw NullPointerException
]]></programlisting>
</informalexample>
<para>
    Between the <code>createIfAbsent(...)</code> call and the <code>getChannel(...)</code> call there is
    application code that may take a while to complete (therefore allowing the sweeper to sweep the just created
    server channel), so it is always safer to mark the channel as persistent, and when it is not needed anymore
    mark the server channel as non persistent (by calling <code>channel.setPersistent(false)</code>), to allow
    the sweeper to sweep it.
</para>
<para>
    The server channel sweeper will sweep channels that are non-persistent, have no subscribers, have no listeners,
    have no authorizers and have no children channels, and only after these conditions are met for three
    consecutive sweeper passes.
</para>
</section>

</section>
